use crate::CodePage;

pub struct Windows1252;

impl CodePage for Windows1252 {
    fn to_utf8(string: &Vec<u8>) -> String {
        let mut result = String::with_capacity(string.len() * 2);
        for c in string {
            result.push(match c {
                0..=0x7f => *c as char,
                0x81 | 0x8D | 0x8F | 0x90 | 0x9D => '\u{FFFD}',
                0x80 => '\u{20AC}',
                0x82 => '\u{201A}',
                0x83 => '\u{0192}',
                0x84 => '\u{201E}',
                0x85 => '\u{2026}',
                0x86 => '\u{2020}',
                0x87 => '\u{2021}',
                0x88 => '\u{02C6}',
                0x89 => '\u{2030}',
                0x8A => '\u{0160}',
                0x8B => '\u{2039}',
                0x8C => '\u{0152}',
                0x8E => '\u{017D}',
                0x91 => '\u{2018}',
                0x92 => '\u{2019}',
                0x93 => '\u{201C}',
                0x94 => '\u{201D}',
                0x95 => '\u{2022}',
                0x96 => '\u{2013}',
                0x97 => '\u{2014}',
                0x98 => '\u{02DC}',
                0x99 => '\u{2122}',
                0x9A => '\u{0161}',
                0x9B => '\u{203A}',
                0x9C => '\u{0153}',
                0x9E => '\u{017E}',
                0x9F => '\u{0178}',
                0xA0 => '\u{00A0}',
                0xA1 => '\u{00A1}',
                0xA2 => '\u{00A2}',
                0xA3 => '\u{00A3}',
                0xA4 => '\u{00A4}',
                0xA5 => '\u{00A5}',
                0xA6 => '\u{00A6}',
                0xA7 => '\u{00A7}',
                0xA8 => '\u{00A8}',
                0xA9 => '\u{00A9}',
                0xAA => '\u{00AA}',
                0xAB => '\u{00AB}',
                0xAC => '\u{00AC}',
                0xAD => '\u{00AD}',
                0xAE => '\u{00AE}',
                0xAF => '\u{00AF}',
                0xB0 => '\u{00B0}',
                0xB1 => '\u{00B1}',
                0xB2 => '\u{00B2}',
                0xB3 => '\u{00B3}',
                0xB4 => '\u{00B4}',
                0xB5 => '\u{00B5}',
                0xB6 => '\u{00B6}',
                0xB7 => '\u{00B7}',
                0xB8 => '\u{00B8}',
                0xB9 => '\u{00B9}',
                0xBA => '\u{00BA}',
                0xBB => '\u{00BB}',
                0xBC => '\u{00BC}',
                0xBD => '\u{00BD}',
                0xBE => '\u{00BE}',
                0xBF => '\u{00BF}',
                0xC0 => '\u{00C0}',
                0xC1 => '\u{00C1}',
                0xC2 => '\u{00C2}',
                0xC3 => '\u{00C3}',
                0xC4 => '\u{00C4}',
                0xC5 => '\u{00C5}',
                0xC6 => '\u{00C6}',
                0xC7 => '\u{00C7}',
                0xC8 => '\u{00C8}',
                0xC9 => '\u{00C9}',
                0xCA => '\u{00CA}',
                0xCB => '\u{00CB}',
                0xCC => '\u{00CC}',
                0xCD => '\u{00CD}',
                0xCE => '\u{00CE}',
                0xCF => '\u{00CF}',
                0xD0 => '\u{00D0}',
                0xD1 => '\u{00D1}',
                0xD2 => '\u{00D2}',
                0xD3 => '\u{00D3}',
                0xD4 => '\u{00D4}',
                0xD5 => '\u{00D5}',
                0xD6 => '\u{00D6}',
                0xD7 => '\u{00D7}',
                0xD8 => '\u{00D8}',
                0xD9 => '\u{00D9}',
                0xDA => '\u{00DA}',
                0xDB => '\u{00DB}',
                0xDC => '\u{00DC}',
                0xDD => '\u{00DD}',
                0xDE => '\u{00DE}',
                0xDF => '\u{00DF}',
                0xE0 => '\u{00E0}',
                0xE1 => '\u{00E1}',
                0xE2 => '\u{00E2}',
                0xE3 => '\u{00E3}',
                0xE4 => '\u{00E4}',
                0xE5 => '\u{00E5}',
                0xE6 => '\u{00E6}',
                0xE7 => '\u{00E7}',
                0xE8 => '\u{00E8}',
                0xE9 => '\u{00E9}',
                0xEA => '\u{00EA}',
                0xEB => '\u{00EB}',
                0xEC => '\u{00EC}',
                0xED => '\u{00ED}',
                0xEE => '\u{00EE}',
                0xEF => '\u{00EF}',
                0xF0 => '\u{00F0}',
                0xF1 => '\u{00F1}',
                0xF2 => '\u{00F2}',
                0xF3 => '\u{00F3}',
                0xF4 => '\u{00F4}',
                0xF5 => '\u{00F5}',
                0xF6 => '\u{00F6}',
                0xF7 => '\u{00F7}',
                0xF8 => '\u{00F8}',
                0xF9 => '\u{00F9}',
                0xFA => '\u{00FA}',
                0xFB => '\u{00FB}',
                0xFC => '\u{00FC}',
                0xFD => '\u{00FD}',
                0xFE => '\u{00FE}',
                0xFF => '\u{00FF}',
            });
        }

        result
    }

    fn from_utf8(utf8: String) -> Vec<u8> {
        let mut result = Vec::with_capacity(utf8.len());

        for c in utf8.chars() {
            result.push(match c {
                ..='\u{007F}' => c as u8,
                '\u{20AC}' => 0x80,
                '\u{201A}' => 0x82,
                '\u{0192}' => 0x83,
                '\u{201E}' => 0x84,
                '\u{2026}' => 0x85,
                '\u{2020}' => 0x86,
                '\u{2021}' => 0x87,
                '\u{02C6}' => 0x88,
                '\u{2030}' => 0x89,
                '\u{0160}' => 0x8A,
                '\u{2039}' => 0x8B,
                '\u{0152}' => 0x8C,
                '\u{017D}' => 0x8E,
                '\u{2018}' => 0x91,
                '\u{2019}' => 0x92,
                '\u{201C}' => 0x93,
                '\u{201D}' => 0x94,
                '\u{2022}' => 0x95,
                '\u{2013}' => 0x96,
                '\u{2014}' => 0x97,
                '\u{02DC}' => 0x98,
                '\u{2122}' => 0x99,
                '\u{0161}' => 0x9A,
                '\u{203A}' => 0x9B,
                '\u{0153}' => 0x9C,
                '\u{017E}' => 0x9E,
                '\u{0178}' => 0x9F,
                '\u{00A0}' => 0xA0,
                '\u{00A1}' => 0xA1,
                '\u{00A2}' => 0xA2,
                '\u{00A3}' => 0xA3,
                '\u{00A4}' => 0xA4,
                '\u{00A5}' => 0xA5,
                '\u{00A6}' => 0xA6,
                '\u{00A7}' => 0xA7,
                '\u{00A8}' => 0xA8,
                '\u{00A9}' => 0xA9,
                '\u{00AA}' => 0xAA,
                '\u{00AB}' => 0xAB,
                '\u{00AC}' => 0xAC,
                '\u{00AD}' => 0xAD,
                '\u{00AE}' => 0xAE,
                '\u{00AF}' => 0xAF,
                '\u{00B0}' => 0xB0,
                '\u{00B1}' => 0xB1,
                '\u{00B2}' => 0xB2,
                '\u{00B3}' => 0xB3,
                '\u{00B4}' => 0xB4,
                '\u{00B5}' => 0xB5,
                '\u{00B6}' => 0xB6,
                '\u{00B7}' => 0xB7,
                '\u{00B8}' => 0xB8,
                '\u{00B9}' => 0xB9,
                '\u{00BA}' => 0xBA,
                '\u{00BB}' => 0xBB,
                '\u{00BC}' => 0xBC,
                '\u{00BD}' => 0xBD,
                '\u{00BE}' => 0xBE,
                '\u{00BF}' => 0xBF,
                '\u{00C0}' => 0xC0,
                '\u{00C1}' => 0xC1,
                '\u{00C2}' => 0xC2,
                '\u{00C3}' => 0xC3,
                '\u{00C4}' => 0xC4,
                '\u{00C5}' => 0xC5,
                '\u{00C6}' => 0xC6,
                '\u{00C7}' => 0xC7,
                '\u{00C8}' => 0xC8,
                '\u{00C9}' => 0xC9,
                '\u{00CA}' => 0xCA,
                '\u{00CB}' => 0xCB,
                '\u{00CC}' => 0xCC,
                '\u{00CD}' => 0xCD,
                '\u{00CE}' => 0xCE,
                '\u{00CF}' => 0xCF,
                '\u{00D0}' => 0xD0,
                '\u{00D1}' => 0xD1,
                '\u{00D2}' => 0xD2,
                '\u{00D3}' => 0xD3,
                '\u{00D4}' => 0xD4,
                '\u{00D5}' => 0xD5,
                '\u{00D6}' => 0xD6,
                '\u{00D7}' => 0xD7,
                '\u{00D8}' => 0xD8,
                '\u{00D9}' => 0xD9,
                '\u{00DA}' => 0xDA,
                '\u{00DB}' => 0xDB,
                '\u{00DC}' => 0xDC,
                '\u{00DD}' => 0xDD,
                '\u{00DE}' => 0xDE,
                '\u{00DF}' => 0xDF,
                '\u{00E0}' => 0xE0,
                '\u{00E1}' => 0xE1,
                '\u{00E2}' => 0xE2,
                '\u{00E3}' => 0xE3,
                '\u{00E4}' => 0xE4,
                '\u{00E5}' => 0xE5,
                '\u{00E6}' => 0xE6,
                '\u{00E7}' => 0xE7,
                '\u{00E8}' => 0xE8,
                '\u{00E9}' => 0xE9,
                '\u{00EA}' => 0xEA,
                '\u{00EB}' => 0xEB,
                '\u{00EC}' => 0xEC,
                '\u{00ED}' => 0xED,
                '\u{00EE}' => 0xEE,
                '\u{00EF}' => 0xEF,
                '\u{00F0}' => 0xF0,
                '\u{00F1}' => 0xF1,
                '\u{00F2}' => 0xF2,
                '\u{00F3}' => 0xF3,
                '\u{00F4}' => 0xF4,
                '\u{00F5}' => 0xF5,
                '\u{00F6}' => 0xF6,
                '\u{00F7}' => 0xF7,
                '\u{00F8}' => 0xF8,
                '\u{00F9}' => 0xF9,
                '\u{00FA}' => 0xFA,
                '\u{00FB}' => 0xFB,
                '\u{00FC}' => 0xFC,
                '\u{00FD}' => 0xFD,
                '\u{00FE}' => 0xFE,
                '\u{00FF}' => 0xFF,
                _ => 0x3F, // '\u{003F}' == '?'
            });
        }

        result
    }
}
